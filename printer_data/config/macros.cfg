[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customize for your slicer of choice
gcode:
  SET_FILAMENT_SENSOR SENSOR=runout_sensor ENABLE=1
  # Capture values passed from the slicer: bed temp, extruder temp, chamber temp
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}

  # Home all axes
  LOGO_GREEN
  G28                                                         # Home XYZ
  G90                                                         # Absolute positioning
  

  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if target_bed > 90 %}
    LOGO_MAGENTA
    M106 S255                                                                       # Turn on part cooling fans to circulate air
    M106 P2 S255                                                                    # Turn on auxillary fans to circulate air
    M190 S{target_bed}                                                              # Set the target temp for the bed
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Wait for chamber to reach desired temp

  # If the bed temp is not over 90c, heat the bed to the desired temp, then wait 30 seconds for chamber temp to stabilize
  {% else %}
    LOGO_MAGENTA
    M190 S{target_bed}
    G4 P30000
  {% endif %}

  # Heat the nozzle
  LOGO_ORANGE
  SMART_PARK                                                    # KAMP near object start
  M107                                                          # Turn off fans
  M109 S{target_extruder}                                       # Heat the nozzle to printing temp

  # Start printing
  LOGO_RED
  # NOZZLE_PURGE                                                # Purge Line across front of bed
  LINE_PURGE                                                    # KAMP 12 mm^3/s in front of object
  # SET_SKEW XY=141.1,140.8,99.8                                # Skew compensation
   
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-18.0 F3600                ; retract filament
    G91                            ; relative positioning
    LOGO_BLUE
#    SET_SKEW CLEAR=1

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 40) %}
        {% set z_safe = 40.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fans
    G90                            ; absolute positioning
    G0 X60 Y{max_y - 10} F3600     ; park nozzle at rear
    M84                            ; disable motors
    LOGO_LIME                     
    M106 P3 S255                   ; turn ON air filter fan
    G4 P300000                     ; wait for 5 minutes - 300,000 milliseconds
    M106 P3 S0                     ; turn OFF air filter fan
    SET_FILAMENT_SENSOR SENSOR=runout_sensor ENABLE=0
    LOGO_OFF

[gcode_macro CHOME]
description: Homes XYZ axis only if printer is in a non-homed state
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

[gcode_macro UNLOAD_FILAMENT]
description: Unloads filament from toolhead
gcode:
  {% set EXTRUDER_TEMP = params.TEMP|default(230)|int %}
  CHOME
  G91                         ; relative positioning
  G1 Z20                      ; move nozzle upwards
  FRONT                       ; move the toolhead to the front
  LOGO_PENDING
  M109 S{EXTRUDER_TEMP}       ; heat up the hotend
  LOGO_READY
  M83                         ; set extruder to relative mode
  G1 E-8 F1800                ; quickly retract a small amount to elimate stringing
  G4 P200                     ; pause for a short amount of time
  G1 E-50 F300                ; retract slowly the rest of the way
  G1 E-20 F300
  M400                        ; wait for moves to finish
  M117 Unload Complete!
  LOGO_PURPLE

[gcode_macro LOAD_FILAMENT]
description: Loads new filament into toolhead
gcode:
  {% set EXTRUDER_TEMP = params.TEMP|default(230)|int %}
  FRONT                       ; move the toolhead to the front
  LOGO_PENDING
  M109 S{EXTRUDER_TEMP}       ; heat up the hotend
  LOGO_READY
  M83                         ; set extruder to relative mode
  G1 E50 F300                 ; extrude slowlyL
  G1 E50 F300
  M400                        ; wait for moves to finish
  M117 Load Complete!
  LOGO_OFF

[gcode_macro CENTER]
description: Moves the toolhead to the center
gcode:
  CHOME
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
  G90
  G1 X{x_center} Y{x_center} F7800

[gcode_macro FRONT]
description: Moves the toolhead to the front
gcode:
  CHOME
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
  G90
  G1 X{x_center} Y10 F7800

[gcode_macro NOZZLE_PURGE]
description: Draw a purge line at the front left edge of the build plate
gcode:
  CHOME
  G0 X2.5 Y4 F3000 ; Go to front
  G0 Z0.15 ; Drop to bed
  M83 ; Set extruder to relative mode
  G1 X45 E15 F500 ; Extrude 25mm of filament in a 4cm line
  G1 E-0.5 F400 ; Retract a little
  G1 X85 F4000 ; Quickly wipe away from the filament line
  G1 Z0.3 ; Raise and begin printing.

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
    SAVE_GCODE_STATE NAME=STATE_HOME_X

    # Home
    G28 X
    # Move away
    G91
    G1 X-5 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P500
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
    RESTORE_GCODE_STATE NAME=STATE_HOME_X

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
    SAVE_GCODE_STATE NAME=STATE_HOME_Y

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-5 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P500
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
    RESTORE_GCODE_STATE NAME=STATE_HOME_Y

[homing_override]
axes: xyz
set_position_z: 0
gcode:
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
    SAVE_GCODE_STATE NAME=STATE_HOME_OVERRIDE

    # Home Z first, to avoid any situation where the nozzle might scrape the bed
    {% if home_all or 'Z' in params %}
        G28 Z
        G1 Z20
    {% endif %}

   {% if home_all or 'Y' in params %}
        _HOME_Y
    {% endif %}

    {% if home_all or 'X' in params %}
        _HOME_X
    {% endif %}
    
    G90
    G0 X60 Y60 Z20 F3600 # move to bed center
    RESTORE_GCODE_STATE NAME=STATE_HOME_OVERRIDE


[gcode_macro LIGHT_ON]
variable_delay_ms: 50
variable_led_count: 8
gcode:
  {% for led_index in range(1, led_count + 1) %}
    SET_LED LED=rgb1 RED=0.8 GREEN=0.8 BLUE=0.99 INDEX={led_index}
    SET_LED LED=rgb2 RED=0.8 GREEN=0.8 BLUE=0.99 INDEX={led_index}
    SET_LED LED=bed_light RED=0.8 GREEN=0.8 BLUE=0.99 WHITE=0
    G4 P{delay_ms}
  {% endfor %}
  

[gcode_macro LIGHT_OFF]
gcode:
  SET_LED LED=rgb1 RED=0 GREEN=0 BLUE=0
  SET_LED LED=rgb2 RED=0 GREEN=0 BLUE=0
  SET_LED LED=bed_light RED=0 GREEN=0 BLUE=0

[gcode_macro LOGO_PENDING]
gcode:
  SET_LED LED=bed_light RED=0.99 GREEN=0.1 BLUE=0.1 WHITE=0

[gcode_macro LOGO_READY]
gcode:
  SET_LED LED=bed_light RED=0.1 GREEN=0.2 BLUE=0.99 WHITE=0

[gcode_macro LOGO_OFF]
gcode:
  SET_LED LED=bed_light RED=0 GREEN=0 BLUE=0 WHITE=0

[gcode_macro LOGO_RED]
gcode:
  SET_LED LED=bed_light RED=0.95 GREEN=0.05 BLUE=0.05 WHITE=0

[gcode_macro LOGO_GREEN]
gcode:
  SET_LED LED=bed_light RED=0.05 GREEN=0.95 BLUE=0.05 WHITE=0

[gcode_macro LOGO_BLUE]
gcode:
  SET_LED LED=bed_light RED=0.05 GREEN=0.05 BLUE=0.95 WHITE=0

[gcode_macro LOGO_YELLOW]
gcode:
  SET_LED LED=bed_light RED=0.95 GREEN=0.95 BLUE=0.05 WHITE=0

[gcode_macro LOGO_MAGENTA]
gcode:
  SET_LED LED=bed_light RED=0.95 GREEN=0.05 BLUE=0.95 WHITE=0

[gcode_macro LOGO_TEAL]
gcode:
  SET_LED LED=bed_light RED=0.05 GREEN=0.95 BLUE=0.95 WHITE=0

[gcode_macro LOGO_ORANGE]
gcode:
  SET_LED LED=bed_light RED=0.95 GREEN=0.45 BLUE=0.05 WHITE=0

[gcode_macro LOGO_LIME]
gcode:
  SET_LED LED=bed_light RED=0.45 GREEN=0.95 BLUE=0.05 WHITE=0

[gcode_macro LOGO_PURPLE]
gcode:
  SET_LED LED=bed_light RED=0.45 GREEN=0.05 BLUE=0.95 WHITE=0

[firmware_retraction]
retract_length: 0.8
retract_speed: 40
unretract_extra_length: 0
unretract_speed: 40

# [gcode_macro SET_ACTIVE_SPOOL]
# gcode: {% if  %} {% set id = params.ID|int %} {action_call_remote_method( "spoolman_set_active_spool", spool_id=id )} {% else %} {action_respond_info("Parameter 'ID' is required")} {% endif %}
# [gcode_macro CLEAR_ACTIVE_SPOOL]
# gcode: {action_call_remote_method( "spoolman_set_active_spool", spool_id=None )}params.IDhttp://192.168.196.183:7912

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True  ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 110.0 ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 110.0 ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 20.0  ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 18.0  ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 40.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 40.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 100  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 100  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : True  ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : "filament_switch_sensor runout_sensor"    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
#                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# !!! Custom macros, please use with care and review the section of the corresponding macro.
# These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : "LOGO_LIME"    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: "LOGO_RED"    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: "LOGO_OFF"    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:

[gcode_macro PAUSE_AFTER_D]
description: Trigger to pause the print after an additional '600' mm has been extruded
variable_end_d: 0 #create variable "END_D" which is associated with the PAUSE_AFTER_D gcode macro
gcode:
  {% set d_start = printer.print_stats.filament_used|float %} #starting point is whatever the filament used is when PAUSE_AFTER_D is called
  {% set d_end = (d_start + params.D|float)|float %} #end point is start + D parameter
  SET_GCODE_VARIABLE MACRO=PAUSE_AFTER_D VARIABLE=end_d VALUE={d_end} #write the end value to the END_D gcode variable to access later
  M117 Pause at {printer["gcode_macro PAUSE_AFTER_D"].end_d|round(2)}
  UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=1 #trigger the delayed gcode below after 1 second if no filament detected

[delayed_gcode PAUSE_AT_D]
initial_duration: 0 #if initial_duration is zero, the delayed gcode won't start by default
gcode:
  {% set d_current = printer.print_stats.filament_used|float %} #get the current filament used
  {% if d_current < printer["gcode_macro PAUSE_AFTER_D"].end_d %} #if we aren't at the stopping point
    M117 Stopping {d_current|round(2)} {printer["gcode_macro PAUSE_AFTER_D"].end_d|round(2)}
    UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=1 #restart the timer on the delayed gcode
  {% else %}
    M600
    UPDATE_DELAYED_GCODE ID=PAUSE_AT_D DURATION=0 #set the delayed gcode duration back to zero so it doesn't keep triggering
  {% endif %}

[gcode_macro M600]
description: Filament change
gcode:
    LOGO_BLUE
    PAUSE X=60 Y=10 Z_MIN=5

[gcode_macro FANS_ON]
gcode:
  #SET_FAN_SPEED FAN=hotend_fan SPEED=0.5
  SET_FAN_SPEED FAN=carbon_fan SPEED=0.5
  SET_FAN_SPEED FAN=Aux_Fan SPEED=0.5
  SET_FAN_SPEED FAN=fan SPEED=0.5
  SET_FAN_SPEED FAN=pcb_fan SPEED=0.5
  
